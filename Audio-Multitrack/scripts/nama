#!/usr/bin/env perl
use Audio::Ecasound::Multitrack;
Audio::Ecasound::Multitrack::mainloop();

__END__
=head1 NAME

B<Audio::Ecasound::Multitrack> - Perl extensions for multitrack audio processing

B<Nama> - Multitrack recording/mixing application

=head1 SYNOPSIS

B<nama> I<options> I<project_name>

=head1 OPTIONS

=over 12

=item B<-d> F<project_root>

Use F<project_root> as Nama's top-level directory. Default: $HOME/nama

=item B<-g>

Graphical mode, with text interface in terminal window

=item B<-t>

Text-only mode

=item B<-f> F<config_file>

Use F<config_file> instead of default F<.namarc>

=item B<-c>

Create the named project

=item B<-a>

Save and reload ALSA mixer state using alsactl

=item B<-m>

Suppress loading of saved state

=item B<-e>

Don't load static effects data

=item B<-s>

Don't load static effects data cache

=back

=head1 DESCRIPTION

B<Audio::Ecasound::Multitrack> provides class libraries for
tracks and buses, and a track oriented user interface for managing 
runs of the Ecasound audio-processing engine.

B<Nama> is a recorder/mixer application that configures
Ecasound as a single mixer bus.

By default, B<Nama> starts up the Tk GUI interface.
The command line interface runs simultaneously in the
terminal.

=head1 STATIC AND DYNAMIC COMMANDS

It may be helpful to observe that our commands for audio
processing fall into two categories:

=head2 STATIC COMMANDS

Some commands control the chain setup that will be used to
configure Ecasound for audio processing.  I refer to them as
I<static commands>.  Static commands have no effect while
the engine is running, come into play only the next time the
transport is armed.

For example, setting the REC/MON/OFF status of a track or
bus determines whether it will be included next time the
transport is armed, and whether the corresponding audio
stream will be recorded to a file or played back from an
existing file. 


=head2 DYNAMIC COMMANDS

Once the transport is running, another subset of commands
controls the audio processing engine, for example adjusting
effect parameters or repositioning the playback head.

=head1 FIRST RUN

On the first run the program prompts the user for permission
to create the configuration file, usually F<$HOME/.namarc>, and
a recording projects directory, F<$HOME/nama> by
default.  You should then edit F<.namarc> to suit your audio
configuration.

=head1 PERSISTENCE

Project state can be stored/retrieved. These data are stored
by default in the F<State.yml> file in the project
directory.

=head1 Tk GRAPHICAL UI 

Invoked by default, the Tk interface provides all
functionality on two panels, one for general control,
the second for effects. 

Logarithmic sliders are provided automatically for effects
with hinting. Otherwise text-entry widgets are used.

After issuing the B<arm> or B<connect> commands, the GUI
time display changes color to indicate whether the upcoming operation
will include live recording (red), mixdown only (yellow) or
playback only (green).  

The text command prompt appears in the terminal window
during GUI operation. Text commands may be issued at any
time.

=head1 TEXT UI

Press the I<Enter> key if necessary to get the following command prompt.

=over 12

B<Enter command:>

=back

You can now enter commands.  Nama and Ecasound
commands may be entered directly. You may also enter Perl
code preceded by C<eval> or shell code preceded by C<!>.

Multiple commands on a single line are allowed if delimited
by semicolons. Usually the lines are split on semicolons and
the parts are executed sequentially, however if the line
begins with C<eval> or C<!> the entire line will be given to
the corresponding interpreter.

You can access command history using up-arrow/down-arrow
(Ctrl-P/Ctrl-N on Mac). 

Type C<help> for general help, C<help command> for help with
C<command>, C<help foo> for help with commands containing
the string C<foo>. 

=head1 TRACKS

Each track has a descriptive name (i.e. vocal) and an
integer track-number assigned when the track is created.

Multiple WAV files can be recorded for each track. These are
identified by version number. Identical version numbers indicate WAV files
recorded at the same time. Version number increments
automatically so that the order of version numbers
follows the time sequence of the recordings.

Each track, including Master and Mixdown, has its own
REC/MON/OFF setting and displays its own REC/MON/OFF
status. The Master bus has only MON/OFF status. Setting REC
status for the Mixdown bus has the same effect as issuing
the B<mixdown> command.

All user tracks belong to the Tracker group, which has
a group REC/MON/OFF setting and a default version setting.

Setting the group to MON (text command B<group_monitor>)
forces user tracks with a REC setting to MON status if
a WAV file is available to play, or OFF status if no
audio stream is available. 

The group MON mode triggers automatically after a recording
that leaves files longer than a second.

The group OFF setting (text command B<group_off>)
excludes all user tracks from the chain setup, and is
typically used when playing back mixdown tracks.  The
B<mixplay> command sets the Mixdown group
to MON and the Tracker group to
OFF.

A track with no recorded WAV files that is set to MON will
show OFF status.


=head1 DIRECTORY STRUCTURE

$project_root is the directory where your project files,
including WAV files you record, will go. $project_root
is defined in F<.namarc>.

=over 12

=item F<$HOME/.namarc>

Nama configuration file

=item F<$project_root/project_name/.wav>

WAV files will be stored here

=item F<$project_root/project_name/Setup.ecs>

Ecasound chainsetup, dynamically generated

=item F<$project_root/project_name/State.yml>

Default save file for project parameters

=item F<$project_root/project_name/.namarc>

Project-specific configuration

=back 

=head1 BUGS AND LIMITATIONS

A project should be loaded or created before issuing other
commands. Many commands will crash the system if issued
without a project loaded.

The command parser tokenizes the command string "hadd" into
"h" "add", i.e. help on commands containing "add".

The loop_enable command is available only in the default
mode.  Timer events are currently handled through the Tk
graphic toolkit, which requires X.

GUI volume sliders are linear scaled.

The post-recording cleanup routine deletes newly recorded
soundfiles under 44100 bytes in size. 

To be able to run entirely without Tk and without X you will
need to delete the line containing 'use Tk' from
Multitrack.pm.

=head1 EXPORT

None by default.

=head1 DEPENDENCIES

This module requires the following Perl modules. 

	Data::YAML
	IO::All
	Getopt::Std
	Tk
	Audio::Ecasound
	Parse::RecDescent
	Data::YAML
	File::Find::Rule
	File::Spec::Link

B<Ecasound audio processing libraries>. Ecasound may be
obtained from http://ecasound.seul.org/ecasound/ or as
precompiled binary packages for your Un*x distribution.

B<Analyseplugin>. To be able to use GUI sliders to control LADSPA plugin
parameters, B<analyseplugin>
(from the LADSPA SDK) must be installed in a directory in
your execution path.  See http://ladspa.org.

B<File>. a BSD utility program, provided with most unixlike 
operating systems.

=head1 AVAILABILITY

CPAN, for the distribution.

Pull source code using this command: 

C<git clone git://github.com/bolangi/nama.git>

=head1 AUTHOR

Joel Roth, E<lt>joelz@pobox.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2007 by Joel Roth

This library is licensed under GPL version 2.  See the file
COPYING (included in the distribution) for terms and
conditions.

=head1 ABSTRACT

Classes and user interfaces for multitrack recording with
the Ecasound audio processing engine
