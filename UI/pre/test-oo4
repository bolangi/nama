package UI;
our @ISA;
use Object::Tiny qw(mode);
sub hello {print "superclass hello\n"};
sub how {print "how are you?", $/}
sub new {
             my $class = shift;
             return bless { @_ }, $class;
         }

sub set {
	my $self = shift;
	my %new_vals = @_;
	my %filter;
	map{$filter{$_}++} keys %{ $self };
	map{ $self->{$_} = $new_vals{$_} if $filter{$_} } keys %new_vals;
}

package UI::Graphical;
our @ISA = 'UI';
sub hello {print "make a window\n";}

package UI::Text;
our @ISA = 'UI';
sub hello {print "hello world!\n"}

my $ui=UI->new;
$ui->hello;
$ui=UI::Graphical->new;
$ui->hello;
$ui->how;

$ui=UI::Text->new;
$ui->hello;
$ui->how;

bless $ui, UI;
$ui->hello;
$ui->how;
package UI;

__END__
sub new { my $class = shift; 
			my $mode = shift; # Text or Graphical
			lc $mode eq 'tk' 
		or	lc $mode eq 'gui'
		or  lc $mode eq 'graphic'
		or  lc $mode eq 'graphical'
		and return bless { @_ },
			::Graphical 
		or  lc $mode eq 'text'
		and return bless { @_ },
			::Text
}


$state_c{$n}->{offset}

package Wav


my $wav = Wav->new( head => vocal);

$wav->versions;
$wav->head  # vocal
$wav->i     # 3 i.e. track 3

returns numbers

$wav->targets

returns targets

$wav->full_path

new branch called object

first test out that code for set! 







	
	

