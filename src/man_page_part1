=head1 NAME

B<Nama> - multitrack recorder and digital audio workstation

=head1 SYNOPSIS

B<nama> [I<options>] [I<project-name>]

=head1 DESCRIPTION

A multitrack audio application for recording, effects
processing, editing, mixing, mastering and live
performance. It can also perform general-purpose audio
processing, such as 5.1 to stereo conversion. Nama uses 
Ecasound as the audio processing engine.

=head2 Audio projects

Projects in Nama are audio networks of tracks and buses.
Tracks may contain one or more RIFF (.wav) files, as well as
effects, sends, inserts, marks, regions, fades,
edits and sequences.  Tracks can host LADSPA, LV2 and
Ecasound plugins.  Audio regions may be altered, duplicated,
time-shifted or replaced.  

Audio processing is performed in realtime when a track is
played and may be cached (frozen) to a new audio file.

Project data is serialized as JSON. The complete history
is tracked by the git version control system.  As a result,
projects can be managed using branches and tags, and provide
undo/redo.

Nama supports some MIDI functionality via midish. 

=head2 Presets and templates

To facilitate reuse, a track's plugins and inserts can be
stored as an I<effect chain>. I<Effect profiles> apply effect
chains to groups of tracks.  I<Project templates> are for
duplicating an entire project sans audio files.

=head2 Audio device

Nama performs Audio IO via JACK or ALSA. Soundcard IO goes
via JACK, if running, with transparent fallback to ALSA.

Nama supports Ladish Level 1 session handling.

=head2 User interfaces

Nama has fully featured terminal command prompt, a Tk
GUI, and experimental OSC and remote-command modes.
 
The command prompt can run Nama commands, Ecasound
interactive-mode commands, commands for the midish MIDI
recorder/player, shell commands and perl code.  Commands and
filenames can be autocompleted using the TAB key. Command
history is available to browse with up and down arrows. 

The help system provides documentation and keyword search
covering Nama commands and effects-processing
plugins.

The hotkey mode provides a convenient way to select, view,
and modify effect parameters.

=head1 OPTIONS

=over 12

=item B<--gui, -g>

Start Nama in GUI mode (default when Tk is available)

=item B<--text, -t>

Start Nama in text mode

=item B<--config, -f>

Specify configuration file (default: ~/.namarc)

=item B<--project-root, -d>

Specify project root directory

=item B<--use-pwd, -p>

Use current dir for all WAV and project files

=item B<--create-project, -c>

Create project if it doesn't exist

=item B<--net-eci, -n>

Use Ecasound's Net-ECI interface

=item B<--libecasoundc, -l>

Use Ecasound's libecasoundc interface

=item B<--save-alsa, -a>

Save/restore alsa state with project data

=item B<--help, -h>

This help display

=item B<--regenerate-effects-cache, -r>

Regenerate the effects data cache

=back

Debugging options:

=over 12

=item B<--no-state, -M>

Don't load project state

=item B<--no-static-effects-data, -S>

Don't load effects data

=item B<--no-static-effects-cache, -C>

Don't load the effects data cache

=item B<--no-reconfigure-engine, -R>

Don't autosave, autoreconfigure or git snapshot

=item B<--fake-jack, -J>

Simulate JACK environment

=item B<--fake-alsa, -A>

Simulate ALSA environment

=item B<--no-ecasound, -E>

Don't spawn Ecasound process

=item B<--execute-command, -X>

Supply a command to execute

=item B<--no-terminal, -T>

Don't initialize terminal

=item B<--no-fades, -F>

No fades on transport start/stop

=item B<--log, -L>

Log these (comma separated) categories

=back


=head1 CONTROLLING NAMA/ECASOUND

The Ecasound audio engine is configured through use of
I<chain setups> that define the signal processing network.

Nama serves as an intermediary, taking high-level user
commands, generating chain setups for user tasks such as
recording, playback, mixing, etc., and running the audio
engine.

=head2 Configuration Commands

Configuration commands affect I<future> runs of the audio
engine.  For example, B<rec, play, mon> and B<off> determine
whether the current track will get its audio stream from an
external (e.g. live) source, whether an existing audio file
will be played back, and whether a new audio file will be
recorded. Nama responds to these commands by reconfiguring
the engine and displaying the updated track status. See 'man
::ChainSetup' for details on how the chain setup created.

=head2 Realtime Commands

Once a chain setup is loaded and the engine is launched,
commands can be issued to control the realtime behavior of
the audio processing engine. These commands include
transport C<start> and C<stop>, playback head repositioning
commands such C<forward>, C<rewind> and C<setpos>. Effects
may be added, modified or removed while the engine is
running.

=head2 Configuration

General configuration of sound devices and program options
is performed by editing the F<.namarc> file, which is
formatted as YAML. On Nama's first run, a default version of
F<.namarc> is placed in the user's home directory.

=head1 Tk GRAPHICAL UI 

Invoked by default if Tk is installed, this interface
provides a subset of Nama's functionality on two
windows: 

=head2 Main Window

The top section has buttons for creating, loading and saving
projects, adding tracks, adding effects to tracks. In
short, for setup.

Below are buttons for controlling the transport (start, stop
and friends) and for setting marks. 

The GUI project name bar and time display change color to
indicate whether the upcoming operation will include live
recording (red), mixdown (yellow) or playback (green).

=head2 Effects Window

The B<effects window> provides sliders for each effect
parameter of each track. Parameter range, defaults, and log/linear
scaling hints are automatically detected. Text-entry widgets
are used to enter parameters values for plugins without
hinted ranges. Any parameter label can be clicked to 
add a parameter controller.

=head2 Waveform Window

Provides a conventional view with waveform and playback head.

=head2 Terminal Window 

The command prompt is available the terminal window
and provides access to all of Nama's functions.

=head1 TEXT USER INTERFACE

Press the I<Enter> key if necessary to get the 
command prompt, which will look something like this:

=over 12

C<nama untitled sax ('h' for help)E<gt>>

=back

In this instance, 'sax' is the current track in the
'untitled' default project. 

When using buses, the bus is indicated before the track:

=over 12

C<nama untitled Strings/violin ('h' for help)E<gt>>

=back

At the prompt, you can enter Nama and Ecasound commands, Perl code
preceded by C<eval> or shell code preceded by C<!>.

Multiple commands on a single line are allowed if delimited
by semicolons. Usually the lines are split on semicolons and
the parts are executed sequentially, however if the line
begins with C<eval> or C<!> the entire line (up to double
semicolons ';;' if present) will be given to the
corresponding interpreter.

You can access command history using up-arrow/down-arrow.

Type C<help> for general help, C<help command> for help with
C<command>, C<help foo> for help with commands containing
the string C<foo>. C<help-effect foo bar> lists all 
plugins/presets/controller containing both I<foo> and
I<bar>. Tab-completion is provided for Nama commands, Ecasound-iam
commands, plugin/preset/controller names, and project names.

Most commands have abbreviations, such as 'afx' for
'add-effect'. These are shown in the help listings.

=head1 TRACKS

Each track has a descriptive name (i.e. vocal) and an
integer track-number assigned when the track is created.
New user tracks initially belong to the Main bus.

Track output signals are usually mixed and pass through the
Main track on the way to soundcard for monitoring.

The following sections describes track attributes and
their effects.

=head2 Width

Specifying 'mono' means the track has one input channel, which
will be recorded as a mono WAV file. Mono track signals are
automatically duplicated to stereo and a pan effect is provided.

Specifying 'stereo' for a track means that two channels of
audio input will be recorded as an interleaved stereo WAV
file.  You can also use a 'stereo' declaration to avoid the
automatic channel copy usually applied to single-channel
sources.

Specifying N channels for a track ('set width N') means N
successive input channels will be recorded as an N-channel
interleaved WAV file.

=head2 REC/PLAY/MON/OFF

Basic signal routing for each track is controlled by its
setting to REC, MON, PLAY or OFF. 

The I<MON> setting prepares to connect the live track source. 

The I<REC> setting prepares to connect the live track source and
record it to an audio file.

The I<PLAY> setting enqueues an audio file for playback from
disk as the track source.
 
The I<OFF> setting tells Nama to remove the track from the
audio network. I<OFF> status may result for a track when no
audio source is available. For example, a track with no
recorded audio files will show OFF status when set to PLAY.

=head2 Track output

By default a track belongs to the Main bus and is routed to
the Main track. This track provides a final fader before the
signal goes via ALSA or JACK to the audio device.

=head2 Bus setting

Buses can force the status of their member tracks to OFF.
Nama provides MON and OFF settings for buses.
OFF (set by C<bus-off>) removes all member tracks from the chain
setup, MON (set by C<bus-mon> restores them.

The B<mixplay> command sets the Mixdown track to PLAY and the
Main bus to OFF.

=head2 Version Numbers

Multiple audio files ("takes") can be recorded for each track. These are
distinguished by a version number that increments with each
recording run, i.e. F<sax_1.wav>, F<sax_2.wav>, etc.  All
audio files recorded in the same run have the same version
number.

The version numbers for track playback can be selected at
the bus or track level. By setting the bus version
to 5, you can play back version 5 of several tracks
at once. Version 5 could signify the fifth take of a song, or
the fifth song of a live recording session. 

The track version setting, if present, overrides the bus
version setting. Setting the track version to zero restores
control of the version number to the bus.

The Main bus version setting does I<not> propagate to
other buses. 

=head2 Marks

Marks in Nama are similar to those in other audio editing
software. One limitation is that mark positions are relative
to the beginning of an Ecasound chain setup. If your project
involves a single track, and you will be shortening the
stream by setting a region to play, set any marks you need
I<after> defining the region.

=head2 Regions

The C<region> command allows you to define endpoints for a
portion of an audio file.  You can then use the C<shift>
command to move the region to the desired time position.

If you use named marks as endpoints, the region will change
if the mark's position is adjusted.

Each track can have one region definition. To create
multiple regions, the C<new-region> command takes a pair of
marks to create a read-only copy of the current track with
the specified region definition. 

You can control this region as you would any other other
track, shifting the start time, applying effects, adjusting volume, etc.

=head3 Using Tracks from Other Projects

The C<link-track> clones a read-only track from
another track, which may belong to a different project. 

=head2 Effects

Each track gets volume and pan effects by default.  New
effects added using C<add-effect> are applied before pan
volume controls.  You can position effects anywhere you
choose using C<insert_effect> or C<position-effect>.

=head3 Fades

Fades can be placed on any track. They
defined by mark position and duration. An additional volume
operator, -eadb, is applied to each track to host the
envelope controller that implements fades.

=head3 Sends and Inserts

The C<send> command can route a track's post-fader output
to a soundcard channel or JACK client in addition to the
normal mixer input. Nama currently allows one aux send per
track.

The C<add-insert> command configures a pre- or post-fader
send-and-return to soundcard channels or JACK clients.
Wet and dry signal paths are provided, with a default
setting of 100% wet.

Each track can have one pre-fader and one post-fader insert.

=head2 Bunches

A bunch is just a list of track names. Using the C<for>
keyword with the name of a bunch will apply the commands
that follow to all of the tracks in the bunch. A bunch can be
created with the C<new-bunch> command. A bus name can also
be treated as a bunch.
 
=head2 Buses

B<Buses> enable multiple tracks to be routed through a
single mix track before feeding the Main mixer bus (or
possibly, another bus.) 

The following commands create a bus and assign
three tracks to it. The mix track takes the name of
the bus and is stereo by default.

	# create a bus named Strings with a same-named mix track
	add-bus Strings 

	# create tracks for the bus
	add-tracks violin cello bass

	# move the tracks from the Main bus (default) to the Strings bus
	for violin cello bass; move-to-bus Strings

	# use the mix track to control bus output volume
	Strings vol - 10

=head3 Submixes

B<Submixes> are a type of bus used to provide instrument
monitors, or to send the outputs from multiple user tracks
to an external program such as jconverter.

=head1 ROUTING

=head2 General Notes

While Nama can address tracks by either name and track number,
Ecasound chain setups use the track number exclusively.

The Main track (mixer output) is always
chain 1, the Mixdown track is always chain 2.

Nama uses Ecasound loop devices where
necessary to connect two tracks, or to allow one track to
have multiple inputs or outputs. Each loop device adds one
buffer, which increases latency. 

=head2 Flow Diagrams

Let's examine the signal flow from track 3, the first 
available user track. Assume track 3 is named "sax".

We will divide the signal flow into track and mixer
sections.  Parentheses show the chain id.

The stereo outputs of each user track terminate at 
Main_in, a loop device at the mixer input.

=head3 Track, REC status

    Sound device   --+---(3)----> Main_in
      /JACK client   |
                     +---(R3)---> sax_1.wav

REC status indicates that the source of the signal is the
soundcard or JACK client. The input signal will be written
directly to a file except in the special preview and doodle
modes.

=head3 Track, PLAY status

    sax_1.wav ------(3)----> Main_in

=head3 Mixer, with mixdown enabled

In the second part of the flow graph, the mixed signal is
delivered to an output device through the Main chain,
which can host effects. Usually the Main track
provides final control before audio output or mixdown.

    Main_in --(1)--> Main_out --+--------> Sound device
                                |
                                +-->(2)--> Mixdown_1.wav

=head3 Mastering Mode

In mastering mode (invoked by C<master-on> and released
C<master-off>) the following network receives the Main
track signal as input and provides an output to the
soundcard or WAV file.

                     +- Low -+ 
                     |       |
    Main_in --- Eq --+- Mid -+--- Boost -> soundcard/wav_out
                     |       |
                     +- High + 

The B<Eq> track hosts an equalizer.

The B<Low>, B<Mid> and B<High> tracks each apply a bandpass
filter, a compressor and a spatialiser.

The B<Boost> track applies gain and a limiter.

These effects and their default parameters are defined
in the configuration file F<.namarc>.

=head2 Mixdown

The C<mixdown> command configures Nama for mixdown. The
Mixdown track is set to REC (equivalent to C<Mixdown rec>)
and the audio monitoring output is turned off (equivalent to
C<Main off>).

Mixdown proceeds after you start the transport.

As a convenience, Mixdown_nn.wav will be symlinked to
F<<project-name>_nn.wav> or F<<branch_name>_nn.wav> in the
project directory. The latter format is used branches other
than the default F<master> branch.) Corresponding encoded
files are created if the F<mixdown_encodings> option is set
in F<.namarc>.  Acceptable values are a space-separated
list. The default is "mixdown_encodings: ogg mp3".

=head2 Preview, Doodle and Eager Modes

These non-recording modes, invoked by C<preview> and
C<doodle> commands tweak the routing rules for special
purposes. B<Preview mode> disables recording of WAV files
to disk. B<Doodle mode> disables PLAY inputs while
excluding any tracks with the same source as a currently
routed track. The C<arm> command releases both preview and
doodle modes.

The eager setting causes the engine to start immediately
following a reconfiguration.

=head2 Saving Projects

If git is available, projects are saved automatically after
each command and it is not necessary to explicitly save
your work.

When you type C<save>, Settings related to the state of the
project are saved in the file F<State.json> in the 
project directory. F<State.json> is tracked by git.

C<save> updates several other data files as well:

F<Aux.json>, also in the project directory, contains
data that is part of the project (such as command history,
track comments, and current operating modes) but with no direct 
effect on the project audio.  

F<global_effect_chains.json>, in the project root directory
(usually F<~/nama>) contains system and user defined effect
chains.

=head3 Save without Git

C<save somename.json> will save project state to a file of
that name.  Similarly C<get somename.json> will load the
corresponding file. The F<.json> suffix may be omitted if
"use_git: 0" is set in F<.namarc>.

=head3 Save with Git

If git is available, Nama uses it to store snapshots of
every step in the history of your project.

When you type C<save initial-mix>, the latest snapshot is
tagged with the name "initial-mix", which you can recall
later with the command C<get initial-mix>. 

You can include a comment with the snapshot:

C<save initial-mix "sounds good enough to send to the front office">

Nama lets you create new branches, starting at any snapshot.

To start a new branch called I<compressed-mix> starting at a
snapshot called I<initial-mix> you would say:

C<new-branch compressed-mix initial-mix>

If you want to go back to working on the master branch, use
C<branch master>.

You can also issue native git commands at the Nama prompt.

=head3 Git history example

All projects begin on the "master" branch. Because this is
the default branch, it is not displayed in the prompt.
Otherwise "master" is not special in any way.

In the graphs below, the letters indicate
named snapshots.

    create test-project
    ...
    save a
    ...
    save b
    ...
    save c
    
    ---a---b---c (master)
    
    get a
    ...
    save d
    ...
    save e
    ...
    save f
    
           d---e---f (a-branch)
          /
    -----a----b---c (master)
    
Now, you want to go back to try something different at "c":

    get c
    ...
    save g
    
          d---e---f (a-branch)
         /
    ----a----b---c (master)
                  \
                   g (c-branch CURRENT HEAD)
    
You could also go back to master, and restart
from there:

    get master
    ...
    save h
    ...
    save i
    
          d---e---f (a-branch)
         /
    ----a----b---c---h---i (master CURRENT HEAD)
                  \
                   g (c-branch)
    
Merging of branches is not supported.

=head2 Exiting

When you type C<quit> Nama will automatically save your work
to F<State.json>. If you I<don't> want this behavior, use
Ctrl-C to exit Nama.

=head2 Jack ports list file

Use I<source filename.ports> to ask Nama
to connect multiple JACK ports listed in a file
F<filename.ports> to the input
port(s) of that track.

If the track is stereo, ports from the list are alternately
connected to left and right channels.
 
=head2 Track edits

An edit consists of audio clips and data structures
associated with a particular track and version. The edit
replaces part of the original audio file, allowing you to fix
wrong notes, or substitute one phrase for another.
Behind the scenes, the host track becomes the mix track to a
bus. Sources for the bus are the original audio track, and
zero or more edits, each represented by a hidden track.

Each track can host multiple edits. Edits are
non-destructive; they are achieved by using Ecasound's
ability to crossfade and sequence.

Before creating the edit, select the track and version to be edited.
You will now need to create three
marks:

=over 4

=item * play start point
=item * rec start point
=item * rec end point

=back

The edit will replace the audio between the rec start and
rec end points.

There are two ways to set these points.

=head3 set-edit-points command

Position the playback head a few seconds before the edit.
Enter the I<set-edit-points> command. This will start the
engine. Hit the B<P> key three times to designate the
playback start, punch-in and punch-out positions.

=head3 Specify points individually

Position the playback head at the position you want playback
for the edit to start. Enter the I<set-play-start-mark>
command.

Use the same procedure to set the rec start and rec end
positions using the I<set-rec-start-mark>
and I<set-rec-end-mark> commands.

=head3 Create the edit 

Enter the I<new-edit> command to create the necessary 
tracks and data structures.

Use I<preview-edit> to confirm the edit positions.  The
engine will run and you will hear the host track with the
target region removed. Playback will be restricted to the
edit region. You may use I<preview_out> to hear the clip to
be removed.

Use I<list-marks> to see the edit marks and I<modify-mark> 
to nudge them into perfect position.

Once you are satisfied with the mark positions, you are
ready to record your edit.

Enter I<start-edit>. Playback will begin at first mark. The
replacement clip will be recorded from the source specified
in the original track.

Each I<start-edit> command will record an additional version
on the edit track. I<redo-edit> will delete (destructively)
the most recent audio clip and begin recording anew.

I<destroy-edit> deletes (destructively) the current edit.

You may specify another range for editing and use the
editing procedure again as many times as you like. Edits on
one track may not overlap.

=head3 Merging edits

I<merge-edits> will recursively merge all edits applied to
the current track and version, creating a new version for
the track.  This will freeze your edits against an
accidental change in mark, region or version settings. 

I<list-edits> will label the edits by index and time.

I<end-edit-mode> will restore normal playback mode


=head1 REMOTE CONTROL

You can send commands to Nama from a remote process, and
retrieve the result. Understand that this code opens a
remote execution hole.

In F<.namarc> you need something like:

      remote_control_port: 57000

Then Nama will set up a listener for remote commands.

The usual return value will be a single newline.

However, if you send an 'eval' command followed by perl
code, the return value will be the result of the perl code
executed with a newline appended. If the result is a list,
the items will be joined by spaces into a single string.

For example, if you send this string:

      eval $this_track->name

The return value will be the name of the current track.

If the result is an object or data structure, it will be
returned in a serialized form. 

=head1 TEXT COMMANDS

