=head1 NAME

B<Nama> - Ecasound-based recorder, mixer and mastering system

=head1 SYNOPSIS

B<nama> [I<options>] [I<project_name>]

=head1 DESCRIPTION

B<Nama> is an application for multitrack recording,
non-destructive editing, mixing and mastering using the
Ecasound audio engine developed by Kai Vehmanen.
Primarily text-based, it also has a simple Tk based GUI.
 
Features include tracks with multiple versions (AKA takes)
buses, effects, presets, sends, inserts, marks, regions,
edits, templates and user-defined commands. Nama runs under
JACK and ALSA audio frameworks, automatically detects LADSPA
plugins, and supports Ladish Level 1 session handling.

Nama's audio processing is non-destructive by default:
effects are applied in realtime; edits are accomplished
through crossfades. These modifications to a track can be
frozen as a new version for that track.
 
The command prompt accepts Nama commands, Ecasound
interactive-mode commands, shell commands and perl code,
with command history and autocompletion.  The help
system provides documentation and keyword search 
covering Nama commands and effects.

By default, Nama displays a simple graphic interface while
the command processor runs in a terminal window. The B<-t>
option provides a text-only interface for console users.

=head1 OPTIONS

=over 12

=item B<--gui, -g>

Start Nama in GUI mode

=item B<--text, -t>

Start Nama in text mode

=item B<--config, -f>

Specify configuration file (default: ~/.namarc)

=item B<--project-root, -d>

Specify project root directory

=item B<--create-project, -c>

Create project if it doesn't exist

=item B<--net-eci, -n>

Use Ecasound's Net-ECI interface

=item B<--libecasoundc, -l>

Use Ecasound's libecasoundc interface

=item B<--save-alsa, -a>

Save/restore alsa state with project data

=item B<--help, -h>

This help display

=back

Debugging options:

=over 12

=item B<--no-static-effects-data, -s>

Don't load effects data

=item B<--no-state, -m>

Don't load project state

=item B<--no-static-effects-cache, -e>

Bypass effects data cache

=item B<--regenerate-effects-cache, -r>

Regenerate the effects data cache

=item B<--no-reconfigure-engine, -R>

Don't automatically configure engine

=item B<--debugging-output, -D>

Emit debugging information

=item B<--fake-jack, -J>

Simulate JACK environment

=item B<--fake-alsa, -A>

Simulate ALSA environment

=item B<--no-ecasound, -E>

Don't spawn Ecasound process

=item B<--execute-command, -X>

Supply a command to execute

=back

=head1 CONTROLLING NAMA/ECASOUND

The Ecasound audio engine is configured through use of
I<chain setups> that specify the signal processing network.
After lauching the engine, realtime control capabilities are
available, for example to adjust effect parameters and set playback
position.

Nama serves as an intermediary, taking high-level commands
from the user, generating appropriate chain setups for
recording, playback, mixing, etc. and running the audio
engine.

=head2 Static Commands

Static commands affect I<future> runs of the audio engine.
For example, B<rec, mon> and B<off> determine whether the
current track will get its audio stream from an external
(usually live) source or whether an existing WAV file will
be played back. Nama responds to static commands by
automatically reconfiguring the engine and displaying the
updated track status.

=head2 Dynamic Commands

Once a chain setup is loaded and the engine is launched,
another set of commands controls the realtime behavior of
the audio processing engine. Commonly used I<dynamic
commands> include transport C<start> and C<stop>, 
playback repositioning commands such C<forward>, C<rewind> and
C<setpos>. Effects may be added, modified or removed 
while the engine is running.

=head2 Configuration

General configuration of sound devices and program options
is performed by editing the F<.namarc> file. On Nama's first
run, a default version of F<.namarc> is usually placed in
the user's home directory. 

=head1 Tk GRAPHICAL UI 

Invoked by default if Tk is installed, this interface
provides a subset of Nama's functionality on two
windows: 

=head2 Main Window

The top section has buttons for creating, loading
and saving projects, adding tracks,
adding effects to tracks.
In short, for setup.

Below are buttons for controlling the transport (start, stop
and friends) and for setting marks. 

The GUI project name bar and time display change color to indicate
whether the upcoming operation will include live recording
(red), mixdown only (yellow) or playback only (green).  Live
recording and mixdown can take place simultaneously.

=head2 Effects Window

The B<effects window> provides sliders for each effect
parameter of each track. Parameter range, defaults, and log/linear
scaling hints are automatically detected. Text-entry widgets
are used to enter parameters values for plugins without
hinted ranges.

=head2 Terminal Window 

The command prompt appears in the terminal window during GUI
operation. Text commands are used to access Nama's more
advanced functions.

=head1 TEXT USER INTERFACE

Press the I<Enter> key if necessary to get the 
command prompt, which will look something like this:

=over 12

C<nama [sax] ('h' for help)E<gt>>

=back

In this instance, 'sax' is the current track.

When using sub-buses, the bus is indicated before
the track:

=over 12

C<nama [Strings/violin] ('h' for help)E<gt>>

=back

At the prompt, you can enter Nama and Ecasound commands, Perl code
preceded by C<eval> or shell code preceded by C<!>.

Multiple commands on a single line are allowed if delimited
by semicolons. Usually the lines are split on semicolons and
the parts are executed sequentially, however if the line
begins with C<eval> or C<!> the entire line (up to double
semicolons ';;' if present) will be given to the
corresponding interpreter.

You can access command history using up-arrow/down-arrow.

Type C<help> for general help, C<help command> for help with
C<command>, C<help foo> for help with commands containing
the string C<foo>. C<help_effect foo bar> lists all 
plugins/presets/controller containing both I<foo> and
I<bar>. Tab-completion is provided for Nama commands, Ecasound-iam
commands, plugin/preset/controller names, and project names.

Many effects have abbreviations, such as 'afx' for
'add_effect'. 

=head1 TRACKS

Each track has a descriptive name (i.e. vocal) and an
integer track-number assigned when the track is created.
New user tracks initially belong to the Main bus.

Track output signals are usually mixed and pass through the
Master track on the way to soundcard for monitoring.

The following sections describes track attributes and
their effects.

=head2 Width

Specifying 'mono' means the track has one input channel, which
will be recorded as a mono WAV file. Mono track signals are
automatically duplicated to stereo and a pan effect is provided.

Specifying 'stereo' for a track means that two channels of
audio input will be recorded as an interleaved stereo WAV file.

Specifying N channels for a track ('set width N') means
N successive input channels will be recorded as an N-channel 
interleaved WAV file.

=head2 REC/MON/OFF

Track REC/MON/OFF status guides audio processing.

Each track, including Master and Mixdown, has its own
REC/MON/OFF setting and displays its own REC/MON/OFF status.
Each bus also has REC, MON and OFF settings that
influence the behavior of user tracks.

=head3 Track status

As the name suggests, I<REC> status indicates that a track
is ready to record a WAV file. 

I<MON> status indicates an audio stream is available from
disk. This status requires the presence of a file matching
the bus or track version number, if specified. A track set
to REC with no live input will default to MON status.

I<OFF> status means that no audio is available for the track
from any source. A track with no recorded WAV files 
will show OFF status, even if set to MON.

=head3 Bus setting

Nama provides MON and OFF settings for buses.
OFF (set by C<bus_off>) removes all member tracks from the chain
setup, MON (set by C<bus_mon> restores them.
(The bus REC setting is obsolete, now equivalent to MON.) 

The B<mixplay> command sets the Mixdown track to MON and the
Main bus to OFF.

=head2 Version Number

Multiple WAV files ("takes") can be recorded for each track. These are
distinguished by a version number that increments with each
recording run, i.e. F<sax_1.wav>, F<sax_2.wav>, etc.  All
WAV files recorded in the same run have the same version
numbers. 

The version numbers of files for playback can be selected at
the bus or track level. By setting the bus version
to 5, you can play back version 5 of several tracks
at once. Version 5 could signify the fifth take of a song, or
the fifth song of a live recording session. 

The track version setting, if present, overrides the bus
setting. Setting the track version to zero restores control
of the version number to the bus.

The Main bus version setting does I<not> currently propagate to
sub-buses. If you have sub-buses you must set bus version 
numbers for each separately if desired.

=head2 Marks

Marks in Nama are similar to those in other audio editing
software, with one small caveat: Mark positions are relative
to the beginning of an Ecasound chain setup. If your project
involves a single track, and you will be shortening the
stream by setting a region to play, set any marks you need
I<after> defining the region.

=head2 Regions

The C<region> command allows you to define endpoints
for a portion of an audio file. Use the C<shift> command
to specify a delay for starting playback.

Each track can have one region definition. For multiple
regions, the C<new_region> command takes a pair of marks to
create a read-only copy of the current track with region
definition. 

You can control this region as you would any other other
track, applying effects, adjusting volume, etc.

Currently, regions are not clipped out of their host track.
This feature may be implemented in future.

=head3 Using Tracks from Other Projects

The C<link_track> clones a read-only track from
another track, which may belong to a different project. 

=head2 Effects

Each track gets volume and pan effects by default.  New
effects added using C<add_effect> are applied after pan 
volume controls.  You can position effects anywhere you choose
using C<insert_effect>.

=head3 Fades

Nama allows you to place fades on any track. Fades are
logarithmic, defined by a mark position and a duration. An
additional volume operator, -eadb, is applied to each track
to host the envelope controller that implements fades.

=head3 Sends and Inserts

The C<send> command can route a track's post-fader output
to a soundcard channel or JACK client in addition to the
normal mixer input. Nama currently allows one aux send per
track.

The C<add_insert> command configures a pre- or post-fader
send-and-return to soundcard channels or JACK clients.
Wet and dry signal paths are provided, with a default
setting of 100% wet.

Each track can have one pre-fader and one post-fader insert.

=head2 Bunches

A bunch is just a list of track names. Bunch names are used
with the keyword C<for> to apply one or more commands to several
tracks at once. A bunch can be created with the C<new_bunch>
command. Any bus name can also be treated as a bunch.
Finally, several system defined bunches are available:

=over 12

=item B<rec>, B<mon>, B<off>

All tracks with the corresponding I<setting> in the current bus

=item B<REC>, B<MON>, B<OFF>

All tracks with the corresponding I<status> in the current bus

=back

=head2 Buses

=head3 Sub Buses

B<Sub buses> enable multiple tracks to be routed through a
single mix track before feeding the main mixer bus (or
possibly another sub bus.) 

The following commands create a sub bus and assign
three tracks to it. The mix track takes the name of
the bus and is stereo by default.

	# create a bus named Strings feeding a mix track named Strings
	add_sub_bus Strings 

	# create tracks for the sub-bus
	add_tracks violin cello bass

	# move the tracks from the Main bus (default) to the Strings bus
	for violin cello bass; set bus Strings

	# use the mix track to control bus output volume
	Strings vol - 10

=head3 Send Buses

B<Send buses> can be used as instrument monitors,
or to send pre- or post-fader signals from multiple
user tracks to an external program such as jconverter

=head1 ROUTING

=head2 General Notes

While Nama can address tracks by either name and track number,
the chain setups use the track number exclusively.

The Master track (mixer output control) is always
chain 1, the Mixdown track is always chain 2.

Nama uses Ecasound loop devices where necessary to connect
two tracks, or to allow one track to have multiple inputs or
outputs. Each loop device adds one buffer, which increases
latency.

=head2 Flow Diagrams

Let's examine the signal flow from track 3, the first 
available user track. Assume track 3 is named "sax".

We will divide the signal flow into track and mixer
sections.  Parentheses show the track number/name.

The stereo outputs of each user track terminate at 
Master_in, a loop device at the mixer input.

=head3 Track, REC status

    Sound device   --+---(3)----> Master_in
      /JACK client   |
                     +---(R3)---> sax_1.wav

REC status indicates that the source of the signal is the
soundcard or JACK client. The input signal will be written
directly to a file except in the special preview and doodle
modes, or if C<rec_disable> is issued.

=head3 Track, MON status

    sax_1.wav ------(3)----> Master_in

=head3 Mixer, with mixdown enabled

In the second part of the flow graph, the mixed signal is
delivered to an output device through the Master chain,
which can host effects. Usually the Master track
provides final control before audio output or mixdown.

    Master_in --(1)--> Master_out --+--------> Sound device
                                    |
                                    +-->(2)--> Mixdown_1.wav

=head3 Mastering Mode

In mastering mode (invoked by C<master_on> and released
C<master_off>) the following network, receives the Master
track signal as input and provides an output to the
soundcard or WAV file.

                       +- Low -+ 
                       |       |
    Master_in --- Eq --+- Mid -+--- Boost -> soundcard/wav_out
                       |       |
                       +- High + 

The B<Eq> track hosts an equalizer.

The B<Low>, B<Mid> and B<High> tracks each apply a bandpass
filter, a compressor and a spatialiser.

The B<Boost> track applies gain and a limiter.

These effects and their default parameters are defined
in the configuration file F<.namarc>.

=head2 Mixdown

The C<mixdown> command configures Nama for mixdown. 
The Mixdown track is set to REC (equivalent to C<Mixdown rec>) and the audio
monitoring output is turned off (equivalent to C<Main off>).

Mixdown proceeds after you start the transport.

As a convenience, Mixdown_nn.wav will be symlinked to
F<<branch_name>_nn.wav> in the project directory. (If git is
disabled or not available F<<project_name>_nn.wav> is used
instead)  Corresponding encoded files are created if the
"mixdown_encodings" option is set. Acceptable values are a
space-separated list. The default is "mixdown_encodings: ogg
mp3".

=head2 Preview and Doodle Modes

These non-recording modes, invoked by C<preview> and C<doodle> commands
tweak the routing rules for special purposes.  B<Preview
mode> disables recording of WAV files to disk.  B<Doodle
mode> disables MON inputs while enabling only one REC track per
signal source. The C<arm> command releases both preview
and doodle modes.

=head2 Saving Projects

The C<save> command is the usual way to save your work.
Settings related to the state of the current mix
are saved in the file F<State.json> in the
current project directory. F<State.json> is tracked by git. 

C<save> updates several other data files as well:

F<Aux.json>, in the current project directory, contains
data that is part of the project (such as command history
and track comments) with no direct effect on the project audio.  

F<global_effect_chains.json>, in the project root directory,
contains system and user defined effect chains.

C<save somename.json> will force saving to a different
filename. Similarly C<get somename.json> will load
the corresponding file.

(The F<.json> suffix may be omitted if git is not present
or is disabled in F<.namarc>.)

=head3 Requirements to Use Git for saving projects

To use git for version control, you must have git installed and, 
"use_git: 1" must be set in F<.namarc>.

=head3 Standard git commands

You can issue git commands in the normal way,
and Nama will stay out of your way. Note that
merging of branches is untested.

=head3 Simplified Workflow Using Git to Manage Project State

Use the C<save> command periodically. On each save command,
changes to F<State.json> will be committed to the
repository.  The commit message will include a list of
commands executed since the previous commit.

The C<save> and C<get> commands for branches behave in a
similar way to save/restore of named files. 

You can say C<save initial-mix> and C<get initial-mix> 
and have them behave as expected, without being
familiar with Git.

What actually happens: C<save initial-mix> will save project
state to F<State.json>, commit changes to that file to the
git repository, and tag current branch's HEAD commit as
"initial-mix". The current branch does not change, remains
in the default branch, "master". 

Later on, on typing C<get initial-mix>, Nama automatically
promotes the tagged commit "initial-mix" to a branch named
"initial-mix-branch" which becomes the current branch.

If you want to start a new branch named something else
at tag "initial-mix" you can say this: 

C<new_branch compressed-mix initial-mix

=head2 Exiting

When you type C<quit> Nama will automatically save your work
to F<State.json>. This will overwrite previous settings in
F<State.json>. If you I<don't> want this behavior, use
Ctrl-C to exit Nama.

=head2 Jack ports list file

Use I<source ports> or I<source filename.ports> to ask Nama
to connect multiple JACK ports listed in a file
(F<trackname.ports> or F<filename.ports>) to the input
ports for that track, which will be set to
I<ecasound:trackname_in_1> for mono. A stereo track will
use I<ecasound:trackname_in_2> as well.

If the track is stereo, ports from the list are alternately
connected to left and right channels. Larger numbers
of channels are handled similarly.

=head2 Track edits

An edit is an audio clip associated with a particular track
and version. The edit replaces part of the original WAV
file, allowing you to fix wrong notes, or substitute one
phrase for another.

Each track can host multiple edits. Edits are
non-destructive; they are achieved by using Ecasound's
ability to crossfade and sequence.

Select the track to be edited and the correct version.

Before creating the edit, you will now need to create three
marks:

=over 4

=item * play start point
=item * rec start point
=item * rec end point

=back

The edit will replace the audio between the rec start and
rec end points.

There are two ways to set these points.

=head3 set_edit_points command

Position the playback head a few seconds before the edit.
Enter the I<set_edit_points> command. This will start the
engine. Hit the B<P> key three times to designate the
playback start, punch-in and punch-out positions.

=head3 Specify points individually

Position the playback head at the position you want playback
for the edit to start. Enter the I<set_play_start_mark>
command.

Use the same procedure to set the rec start and rec end
positions using the I<set_rec_start_mark>
and I<set_rec_end_mark> commands.

=head3 Provide marks as arguments to I<new_edit> (not implemented)

Type I<new_edit play_start_mark rec_start_mark rec_end_mark>.)

=head3 Create the edit 

Enter the I<new_edit> command to create the necessary 
tracks and data structures.

Use I<preview_edit> to confirm the edit positions.  The
engine will run and you will hear the host track with the
target region removed. Playback will be restricted to the
edit region. You may use I<preview_out> to hear the clip to
be removed.

Use I<list_marks> to see the edit marks and I<modify_mark> 
to nudge them into perfect position.

Once you are satisfied with the mark positions, you are
ready to record your edit.

Enter I<start_edit>. Playback will begin at first mark. The
replacement clip will be recorded from the source specified
in the original track.

Each I<start_edit> command will record an additional version
on the edit track. I<redo_edit> will delete (destructively)
the most recent audio clip and begin recording anew.

You may specify another range for editing and use
the editing procedure again as many times as 
you like. Edits may not overlap.

=head3 Merging edits

I<merge_edits> will recursively merge all edits applied to
the current track and version, creating a new version.

I recommend that you merge edits when you are satisfied,
with the results to protect your edits against an accidental
change in mark, region or version settings. 

I<restore_edits> acts on a merged version of the current
track, selecting the prior unmerged version with all edits
and region definitions in "live" form.  You may continue to
create new edits. B<TO BE IMPLEMENTED>

I<list_edits> will label the edits by index and time.

I<end_edit_mode> will restore normal playback mode

I<destroy_edit>
Behind the scenes, the host track becomes the mix track to a
sub-bus. Sources for the bus are the original audio track, and
zero or more edits, each represented by one track object.

=head1 TEXT COMMANDS

