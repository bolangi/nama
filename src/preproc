#!/usr/bin/env perl
# 
# This script provides templating functions for building
# a perl module from sources.
#
# Run 'myproc' to provide preprocessing for Audio::Nama
#
#
# special cases: 
# Do NOT convert the following:
#
# ${$pkg}::IO     						# close bracket before ::
# "$class\::IO"   						# backslash before ::
# /::from/::to/							# slash before ::
# qw( :: ::main main:: ) # SKIP_PREPROC # directive
#

use Text::Template;
use Getopt::Std;
use File::Find;
use File::Slurp;
use strict;
use Cwd;
use Storable qw(dclone); 

my(
	%opts,
	$source_dir,
	$target_dir,
	$new_root,
	$file,
	$exta ,
	$extb ,
	$stub ,
	$template ,
	$filename,
	);

my $debug = 0;
getopts('ds:t:f:r:a:b:', \%opts);
$source_dir = $opts{s};
$new_root = $opts{r};
$target_dir = $opts{t};
$exta = $opts{a};
$extb = $opts{b};
$file = $opts{f};
$debug = $opts{d};

$debug and print <<PRINT;
source dir:   $source_dir
target dir:   $target_dir
module root:  $new_root
exta:         $exta
extb:         $extb
file:         $file
PRINT
die "no source directory: $source_dir" unless -d $source_dir;
die "no target directory: $target_dir" unless -d $source_dir;
&find_and_process($source_dir, $target_dir, $exta, $extb); 

sub process {
	my ($file_in, $file_out) = @_;
	$debug and print "dir: ", getcwd, ", in: $file_in, out: $file_out\n";
	#return;

	#I'll assume I'm in the correct directory

	# create Template object
	my $template = Text::Template->new(
		TYPE => 'FILE',
		SOURCE => $file_in,
		DELIMITERS => [ qw( [% %] ) ],
	);
	my $template_dump = dclone($template);
	delete $template_dump->{SOURCE};
	use Data::Dumper::Concise;
	$debug and print "Text::Template object (with source omitted) is:\n", Dumper $template_dump;
	my $hash = {name => 'goblin' };

#### Include files and process code in [% %] directives

	my $text = $template->fill_in(HASH=>$hash);

#### Convert ::Something to Audio::Nama::Something

	my $rooted_text = &bestow_module_root($new_root,$text);

#### Hack arguments to logging subroutines 

	$rooted_text =~ s/logit\(/logit(__LINE__,/g;
	$rooted_text =~ s/logpkg\(/logpkg(__FILE__,__LINE__,/g;

# we are going to standardize on using :: as the 
# root package name, so that coding will be
# separate from the final place in the hierarchy.
# ::, ::Text will be translated to Audio::Nama, # Audio::Nama::Text
# after the file includes

	if ( $file_out ) { write_file($file_out, $rooted_text) }
	else { print $rooted_text }
}
sub bestow_module_root {
	my ($new_root, $text) = @_;

		join "\n",map{ 
			s/([^\w\}\\\/]|^)(::)([\w:])/$1$new_root$2$3/g unless /SKIP_PREPROC/;
			s/([^\w\}\\\/]|^)(::)([^\w])/$1$new_root$3/mg unless /SKIP_PREPROC/;
			$_;
		} split "\n",$text;
}

sub find_and_process {
	my ($source_dir, $target_dir, $exta, $extb) = @_; 
	find(\&wanted, $source_dir);
}

sub wanted { 
	return if grep { $File::Find::name =~ m(/$_/) } 
		map{"/$_/"}qw(.git .ttree blib lib try t);
	my $re = qr/(\w+)\.$exta$/;
	$File::Find::name =~ /$re/ or return;
	$stub = $1;
	$debug and print $File::Find::name, $/; 
	$debug and print "stub: $stub\n";
	$debug and print "cwd: ", getcwd, $/;
	my $input =  "$stub.$exta";
	my $output = "$target_dir/$stub.$extb";

	## now to process
	
	&process($input, $output);
	
}
sub grammar {

	$debug and print "grammar replace\n";

	my $list = io('commands')->all;

	my $body = io('grammar_body')->all;
	$body =~ s/::/Audio::Ecasound::Flow::/g;

	my (@abbrevs, @stubs, @commands);

	map{

		my @parts = my @all_parts = split " ", $_;
		my $full = shift @parts;
		my @short = @parts;
		push @abbrevs,	"_$full: " . join (" | " , @all_parts);
		push @stubs,   	"$full: _$full {}";
		push @commands,	"command: $full";

	} split "\n", $list;

	my $command_headers = join "\n", @commands, @abbrevs, @stubs ;

	{ 
		commands 	 => $command_headers,
		grammar_body => $body,
	};
	
}
__END__

