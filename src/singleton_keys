$midi->{keywords} 				# list of Midish commands for the parser to recognize
$config->{memoize} 				# method caching
$config->{hires_timer}			# indicates if we are capable
$config->{opts}					# command line arguments
$config->{soundcard_channels}	# a constant needed for GUI - can we discover this?
$config->{disable_auto_reconfigure} # -R option
$config->{engine_muting_time} 	# delay for engine to mute/unmute
$config->{fade_time1_fraction}	# two-part fade on engine start/stop
$config->{fade_down_fraction}
$config->{fade_time2_fraction}
$config->{fade_down_fraction}
$config->{fader_op}				# Ecasound operator selected for fader 
$config->{category}				# hack to change logging category
$config->{want_logging}			# keys are categories requested for loggin
$config->{latency_op}			# operator for latency compensation
$config->{latency_op_init}		# initial values
$config->{latency_op_set}		# subroutine for setting latency compensation
$config->{_is_system_bus}		# a hash
$config->{osc_listener_port}
$config->{remote_control_port}

$jack->{seek_delay}				# extra time for stop-seek-start process
$jack->{jackd_running}			# jackd status, but this should be a subroutine
$jack->{fake_ports_list}		# for testing
$jack->{clients}				# JACK client information
$jack->{periodsize}				# 
$setup->{_old_snapshot}			# for checking if engine needs reconfigured
$setup->{_old_rec_status}		# for checking rec status change hooks
$setup->{inputs_used}			# we warn if tracks share same input channel
$setup->{tracks_with_duplicate_inputs}
$setup->{cooked_record_pending}
$setup->{changed}
$setup->{wav_info}				# length and format of each WAV file 
$setup->{runtime_limit}
$setup->{loop_endpoints}		# for looping
$setup->{audio_length}
$setup->{offset_run}->{start_time}
$setup->{offset_run}->{end_time}
$setup->{offset_run}->{mark}
$setup->{edit_points}
$setup->{_last_rec_tracks}		# tracks we recorded to last time
$setup->{latency}				# track latency info
$setup->{cache_track_args}

$fx_cache->{registry}			# effects database
$fx_cache->{full_label_to_index}# el:tap_pinknoise -> effect index
$fx_cache->{partial_label_to_full} # tap_pinknoise -> el:tap_pinknoise
$fx_cache->{user_help}			
$fx_cache->{ladspa_sorted}		# 
$fx_cache->{ladspa}						# store for LADSPA plugin data
$fx_cache->{ladspa_id_to_filename} 		# 2155 -> tap_pinknoise.so
$fx_cache->{ladspa_label_to_unique_id}  # tap_pinknoise -> 2155
$fx_cache->{ladspa_id_to_label}			# 2155 -> tap_pinknoise
$fx_cache->{ladspa_help}				# store for LADSPA plugin help
$fx_cache->{lv2_help}					# store for LV2 plugin help
$fx_cache->{split}				# help divide effects into groups for GUI display
$help->{screen}					# top-level help output
$help->{arr_topic}				# sequential array of help pages 
$help->{topic}					# access help page by name
$help->{usage}					# usage output

$mode->{preview}				# preview or doodle
$mode->{eager}					# dismantled
$mode->{offset_run}				# record starting other than at the beginning
$mode->{soloing}				# boolean
$mode->{loop_enable}			# boolean
$mode->{mastering}				# boolean
$mode->{midish_terminal}		# unused?
$mode->{midish_transport_sync}  # not implemented, sync Ecasound start/stop with midish
$project->{events}				# timers used during engine run
$this_engine->{socket}			# socket for Ecasound command I/O (Net-ECI)
$this_engine->{pids}			# Ecasound process PIDs
$this_engine->{ecasound}		# Audio::Ecasound object (libecasoundc)
$this_engine->{buffersize}		# engine buffersize

$fx->{ecasound_effect_hints}	# hints for ecasound effects
$fx->{offset}					# offset to locate first user-addressable 
								# chain operator, by track index
$fx->{muted}					# names of muted tracks
$fx->{id_counter}				# increments for effects A B C...
$fx->{applied}					# Nama applied effects info
								# hash by effect ID
$fx->{params}					# parameters of applied effects
								# hash by effect ID
$fx->{params_log}				# for log scale sliders
$fx->{alias}

$text->{grammar}				# grammar source
$text->{parser}					# Parse::RecDescent parser
$text->{hotkey_grammar} 		# hotkeys grammar source
$text->{hotkey_parser} 			# 
$text->{hotkey_buffer} 			#
$text->{hotkey_object_buffer} 	# 
$text->{hotkey_callback}		#
$text->{wrap}					# Text::Format object for wrapping text
$text->{format_fields}			# ??
$text->{commands_yml}			# command description YAML source
$text->{commands}				# command description, perl data structure
$text->{command_shortcuts}		# hash: shortcut -> full_command_name
$text->{iam}					# Ecasound IAM commands
$text->{term}					# Term::ReadLine object
$text->{previous_cmd}			# store command history without successive duplicates
$text->{keywords}				# Nama keywords for autocomplete
$text->{term_attribs}			# Term::ReadLine's terminal attributes hash
$text->{format_top}				# format for track display 
$text->{format_divider}			# 
$text->{user_command}			# user defined commands
$text->{user_alias}				# user defined command aliases
$text->{command_history}		# terminal command history
$text->{screen_lines}			# 
$text->{screen_columns}			#
$text->{hotkey_playback_jumpsize}
$text->{hyphenated_commands}	# remove-track => remove_track
$text->{eval_result}			# buffer for result of eval_perl() 
$text->{output_buffer}			# buffer for output of OSC commands

$project->{name}				# project name
$project->{bunch}				# track bunches lists
$project->{repo}				# Git::Repository object
$project->{timebase}			# seconds or samples, unused
$project->{track_comments}		# per track comments
$project->{track_version_comments} # per version comments
$project->{save_file_version_number} # version of Nama that wrote State.json
$project->{command_buffer}			# command history for commit message
$project->{artist}				# Artist field for mp3/ogg encoding
$project->{current_op}			# current effect, per track
$project->{current_param}		# current parameter, per effect
$project->{current_stepsize}	# stepsize, per effect/parameter
$project->{playback_position}	# in order to restore position after a reconfigure
$project->{mark_sequence_counter} # used for system assigned mark names
$project->{redo}				# last commit removed by undo
$project->{osc_socket}			# OSC listener socket
$project->{osc}					# Protocol::OSC object
$project->{remote_control_socket} # text command listener socket

$file->{effects_cache}			# Name of effects discovery cache
$file->{global_effect_chains}	# Name of global effect chains file
$file->{state_store}			# Name of state file
$file->{chain_setup}			# Name of chain setup file 
$file->{user_customization}		# Name of user customization file
$file->{gui_palette}			# Name of GUI color scheme file

$jack->{use_jacks}				# Prefer using jacks library
$mastering->{track_names}		# Names of mastering tracks

# the following variables are written to by widgets
$gui->{_seek_unit}				# minutes or seconds
$gui->{_project_name}
$gui->{_track_name}
$gui->{_chr}
$gui->{_chm}
$gui->{_save_id}

# GUI objects
$gui->{mw}						# main window
$gui->{ew}						# effects window
$gui->{canvas}					# canvas
$gui->{load_frame}				# frames for various parts of the display
$gui->{add_frame}
$gui->{group_frame}
$gui->{time_frame}
$gui->{clock_frame}
$gui->{track_frame}
$gui->{fx_frame}
$gui->{iam_frame}
$gui->{perl_frame}
$gui->{transport_frame}
$gui->{mark_frame}
$gui->{seek_frame}

$gui->{group_label}				# label for group (Main bus)
$gui->{group_rw}				# rw setting for Main bus
$gui->{group_version} 			# version setting for Main bus
$gui->{tracks}					# track widgets, by index
$gui->{tracks_remove}			# track widgets list, by index, for destruction
$gui->{fx}						# effects widgets lists, by effect ID
$gui->{marks}					# mark widgets, index by position 
$gui->{global_version_buttons}	# 
$gui->{mark_remove}				# mark remove widget
$gui->{_markers_armed}			# boolean, ready to set a mark

$gui->{seek_unit}				# transport jump unit: seconds or minutes
$gui->{clock}					# clock widget
$gui->{setup_length}			# setup length display widget

$gui->{project_head}			# project widgets
$gui->{project_label}
$gui->{project_entry}			# project name entry widget
$gui->{load_project}			# load project button
$gui->{new_project}				# new project button
$gui->{quit}					# quit button
$gui->{palette}					# color scheme selector
$gui->{nama_palette}			# additional color scheme selector
$gui->{savefile_entry}			# name for saving
$gui->{save_project}			# save button
$gui->{load_savefile}			# load button
$gui->{_palette_fields}	
$gui->{_nama_fields}
$gui->{_nama_palette}
$gui->{_palette} 
$gui->{add_track}->{label}		# label
$gui->{add_track}->{text_entry}	# track name entry widget
$gui->{add_track}->{add_mono}	# add mono track button
$gui->{add_track}->{add_stereo} # add stereo track button
$gui->{add_track}->{rec_label}  # source label
$gui->{add_track}->{rec_text} 	# source text entry widget
$gui->{engine_label}			# label
$gui->{engine_arm}				# configure engine button 
$gui->{engine_disconnect}		# disconnect setup button
$gui->{engine_start}			# start button
$gui->{engine_stop}				# stop button
$gui->{_old_bg}					# default background color
$gui->{_old_abg}				# default active background color
$config->{soundcard_loopback_delay}
$jack->{connections}
$jack->{is_own_port}
$jack->{connections}
$jack->{is_other_port}
$jack->{is_own_port}
$jack->{is_other_port}
$jack->{graph}
$jack->{watcher}
