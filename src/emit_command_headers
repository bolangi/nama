#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
no warnings "uninitialized";
my $debug = 0;
my (@commands, @abbrevs);
use File::Slurp;
use YAML::Tiny;

my $output = shift @ARGV;

my $in = qx(./strip_all  ./commands.yml);

# preserve order for generating docs

my @keys = $in =~ /^(\w+)/mg;
my @types = $in =~ /^  type: (\w+)/mg;
#print "$_\n" for @keys; 
#print "$_\n" for @types; 


# read in data structure

my $ref = yaml_in( $in); 
#print yaml_out $ref;


=comment testing for missing definitions

my %body;
my $cmd = q(perl -ne '/^(\w+):/ and print "$1\n"' grammar_body.pl  | uniq);
map{ $body{$_}++ } split " ", qx($cmd);

map{ $ref->{$_} or print "$_\n" } keys %body;
print "\n----\n";
map{ $body{$_} or print "$_\n" } keys %{$ref};
exit;

=cut

# generate command headers

if ($output eq 'headers'){

	map { my $func = $_; 
		my @parts = ($func, split " ", $ref->{$func}->{short});
		my @all_parts = @parts;
		my $full = shift @parts;
		my @short = @parts;
		my $end_anchor = "end";
		push @abbrevs,	"_$full: " . join(" | " , add_break(@all_parts))  ;
		#push @stubs,   	"$full: _$full $end_anchor { 1 }";
		push @commands,	"command: $full";
	} @keys;
	print join "\n", @commands, @abbrevs ;

}

# generate command pod

elsif ($output eq 'pod'){
	my $previous_type = q();

	map{ 

		# insert new category head if needed
		
		my $type = $ref->{$_}->{type};

		if ( $type ne $previous_type ){
			$previous_type = $type;
			print "=head2 ", ucfirst $type, " commands\n\n";
		}
		my $short = $ref->{$_}->{short};
		$short = "($short) " if $short;
		print "=head4 B<$_> $short- ", ucfirst $ref->{$_}->{what}, "\n\n";

		my $param = q();
		$param = $ref->{$_}->{parameters} 
			unless $ref->{$_}->{parameters} eq 'none';
		print "=over 8\n\n";
		print "C<$_> $param\n\n";

		if (my $example = $ref->{$_}->{example}){

			# convert literal !n to double newlines
			# add C<> tags to command text

			my @example = split '!n', $example;
			#print "found ", scalar @example, "lines\n";
			$example = join "", map{ $_ = "C<$_>\n\n" } @example;

			print "$example\n\n";
		}
		print "=back\n\n";
	} @keys;

} else { die "$0: parameter 'headers' or 'pod' required" }


sub yaml_in {
	
	# $debug2 and print "&yaml_in\n";
	my $input = shift;
	my $yaml = $input =~ /\n/ # check whether file or text
		? $input 			# yaml text
		: read_file($input);	# file name
	if ($yaml =~ /\t/){
		croak "YAML file: $input contains illegal TAB character.";
	}
	$yaml =~ s/^\n+//  ; # remove leading newline at start of file
	$yaml =~ s/\n*$/\n/; # make sure file ends with newline
	$yaml = quote_yaml_scalars($yaml);
	my $y = YAML::Tiny->read_string($yaml);
	die "YAML::Tiny read error: $YAML::Tiny::errstr\n" if $YAML::Tiny::errstr;
	$y->[0];
}
sub quote_yaml_scalars {
	my $yaml = shift;
	my @modified;
	map
		{  
		chomp;
		if( /^(?<beg>(\s*\w+: )|(\s+- ))(?<end>.+)$/ ){
			my($beg,$end) = ($+{beg}, $+{end});
			# quote if contains colon and not quoted
			if ($end =~ /:\s/ and $end !~ /^('|")/ ){ 
				$end =~ s(')(\\')g; # escape existing single quotes
				$end = qq('$end') } # single-quote string
			push @modified, "$beg$end\n";
		}
		else { push @modified, "$_\n" }
	} split "\n", $yaml;
	join "", @modified;
}
	

sub add_break { map{ qq(/$_\\b/) } @_ }
