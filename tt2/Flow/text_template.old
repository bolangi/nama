use Text::Template 'fill_in_file';

# All templates will always have `use strict vars' attached to all fragments
Text::Template->always_prepend(q{use strict 'vars';});

$filename = qw( Grammar.p );
my @delimiters =qw( [%  %] );

# Use a different template file syntax:

$template = Text::Template->new(
	DELIMITERS => [ @delimiters ],
	TYPE => 'FILE',
	SOURCE => $filename,
	);
$hash = { 
			grammar => eval {qx(cat grammar)} 
				or carp("Failed to generate grammar");
		}
$text = $template->fill_in(HASH => $hash);
print $text;

 # grammar.g  # preprocessor text
 # grammar    # 
 # Grammar.p
 # Grammar.g  # preprocessor text
 # Grammar    # 

If for Grammar.p, there is Grammar.g

__END__
#  $template = Text::Template->new(TYPE => 'ARRAY', SOURCE => [ ... ] );
#  $template = Text::Template->new(TYPE => 'FILEHANDLE', SOURCE => $fh );
#  $template = Text::Template->new(TYPE => 'STRING', SOURCE => '...' );
 #$template = Text::Template->new(PREPEND => q{use strict;}, ...);

 # Use a different template file syntax:
# $template = Text::Template->new(DELIMITERS => [$open, $close], ...);
# 
#  $recipient = 'King';
#  $text = $template->fill_in();  # Replaces `{$recipient}' with `King'
#  print $text;
# 
#  $T::recipient = 'Josh';
#  $text = $template->fill_in(PACKAGE => T);

 # Pass many variables explicitly
#  $hash = { recipient => 'Abed-Nego',
#            friends => [ 'me', 'you' ],
#            enemies => { loathsome => 'Bill Gates',
#                         fearsome => 'Larry Ellison' },
#          };
#  $text = $template->fill_in(HASH => $hash, ...);
 # $recipient is Abed-Nego,
 # @friends is ( 'me', 'you' ),
 # %enemies is ( loathsome => ..., fearsome => ... )
 # Call &callback in case of programming errors in template
#  
#  $text = $template->fill_in(BROKEN => \&callback, BROKEN_ARG => $ref, ...);
# 
#  # Evaluate program fragments in Safe compartment with restricted permissions
#  $text = $template->fill_in(SAFE => $compartment, ...);
# 
#  # Print result text instead of returning it
#  $success = $template->fill_in(OUTPUT => \*FILEHANDLE, ...);
# 
#  # Parse template with different template file syntax:
#  $text = $template->fill_in(DELIMITERS => [$open, $close], ...);
#  # Note that this is *faster* than using the default delimiters
# 
#  # Prepend specified perl code to each fragment before evaluating:
#  $text = $template->fill_in(PREPEND => q{use strict 'vars';}, ...);
# 
#  use Text::Template 'fill_in_string';
#  $text = fill_in_string( <<EOM, PACKAGE => 'T', ...);
#  Dear {$recipient},
#  Pay me at once.
#         Love, 
#          G.V.
#  EOM
# 


