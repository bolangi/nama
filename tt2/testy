use Data::YAML::Writer;
use Data::YAML::Reader;
use Carp;
use IO::All;
    $yw = Data::YAML::Writer->new;
    $yr = Data::YAML::Reader->new;

=== proven for YAML reading/writing
my $debug3++;
my $scalar = 'hello';
my $scalar_ref = \$scalar;
my $array_ref = [1..5];
my $hash_ref = { 1, 2, 3, [4, 5]};
my $code_ref = sub{ print 'helloworld' };
my $bareword = BAREWORD;
print join "===========\n",  $/, yaml_out( 
	$yr->read( 
		yaml_out($hash_ref
	) ) ); # returns ref
$/;
exit;
#  $fh 
my $a = &see_ref($hash_ref);
#my $a = &see_ref($hash_ref);
exit;
sub see_ref {
my $scalar = shift; # the container is a scalar
	my $type = ref $scalar;
#$debug and carp ("C-REF: expected array or hash, \n",
#"found a scalar containing a : ", ref $scalar , $/);
$debug3 and print "expected an array or hash, got: $type\n"; 
$type =~ m/ARRAY|HASH/ and 
		$debug3 and print ("Yaml::Writer can process type $type", $/,
		,yaml_out( $scalar ), $/ );
	
	$scalar; # return myself to caller
	}


=comment
my $all = { # scalar_ref => $scalar_ref,  # no, nor scalar scalar_ref, coderef, bareword, 
			array_ref => $array_ref,
			hash_ref => $hash_ref,
			};
# my $out = yaml_out($hash_ref);
my $out = yaml_out($all);

print $out;
#print yaml_out ( yaml_in('./test.yaml') );
=cut
sub yaml_out {
	$debug2 and print "&yaml_out\n";
	my ($data_ref) = shift; 
	my $type = ref $data_ref;
	$debug and print "data ref type: $type\n "; 
#	croak "attempting to code wrong data type: $type" if $type !~ /HASH|ARRAY/;
#	carp "can't yaml-out a Scalar!!\n" if ref $data_ref eq 'SCALAR';
	my $output;
    $yw->write( $data_ref, \$output ); # XXX broken
	$output;
}

sub yaml_in {
	my $file = shift;
	my $yaml = io($file)->all;
	$yr->read( $yaml ); # returns ref
}

	
